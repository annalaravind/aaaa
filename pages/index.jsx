import React, { useState } from "react";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import Radio from "../components/Radio";
import GridButton from "../components/GridButton";
import GridCells from "../components/GridCells";

const Home = () => {
  const selectedIds = new Set();
  const [allIds, setAllids] = useState(new Map());
  const [allSelectedIds, setAllSelectedids] = useState(new Map());
  const [idSelect, setIdSelect] = useState(selectedIds);
  const [allColumnSelect, setAllColumnSelect] = useState(selectedIds);
  const [allRowSelect, setAllRowSelect] = useState(selectedIds);
  const [moving, setMoving] = useState(false);

  const radioLables = ["Unknown", "Reference", "Standards", "NTC", "Empty"];
  const alphabetId = Array.from({ length: 8 }, (_, index) =>
    String.fromCharCode(65 + index)
  );
  const ColoumElements = [];

  // Indiviual Selection.....
  const onClickHandler = (id) => {
    if (idSelect.has(id) || allColumnSelect.has(id) || allRowSelect.has(id)) {
      // individual
      const newSet = new Set(idSelect);
      newSet.delete(id);
      setIdSelect(newSet);

      // column
      const newColumnAllSet = new Set(allColumnSelect);
      newColumnAllSet.delete(id);
      setAllColumnSelect(newColumnAllSet);
      console.log(idSelect);

      // Row
      const newRowAllSet = new Set(allRowSelect);
      newRowAllSet.delete(id);
      setAllRowSelect(newRowAllSet);

      // All id's
      const newAllIds = new Map(allSelectedIds);
      newAllIds.delete(id);
      setAllSelectedids(newAllIds);
    } else {
      const newSet = new Set(idSelect);
      newSet.add(id);
      setIdSelect(newSet);

      // all id's
      const newAllIds = new Map(allSelectedIds);
      newAllIds.set(id);
      setAllSelectedids(newAllIds);
    }
  };

  // Column Group Selection....
  const onColumnHandler = (id) => {
    const newSet = new Set(allColumnSelect);
    const newAllIds = new Map(allSelectedIds);
    for (let i of alphabetId) {
      if (!allColumnSelect.has(`${i}${id}`)) {
        newSet.add(`${i}${id}`);

        // all id's

        newAllIds.set(`${i}${id}`);
      } else {
        newSet.delete(`${i}${id}`);

        // all id's

        newAllIds.delete(`${i}${id}`);
      }
    }
    setAllSelectedids(newAllIds);
    setAllColumnSelect(newSet);
  };
  // Rows Group Selection....
  const onRowsHandler = (id) => {
    const newSet = new Set(allRowSelect);
    const newAllIds = new Map(allSelectedIds);
    for (let i = 1; i < 13; i++) {
      if (!allRowSelect.has(`${id}${i}`)) {
        newSet.add(`${id}${i}`);
        // all id's

        newAllIds.set(`${id}${i}`);
      } else {
        newSet.delete(`${id}${i}`);
        // all id's

        newAllIds.delete(`${id}${i}`);
      }
    }
    setAllRowSelect(newSet);
    setAllSelectedids(newAllIds);
  };

  // Moving Ball....
  const onMovingBall = () => {
    setMoving(!moving);
  };

  const circleStyle = {
    width: "25px",
    height: "25px",
    backgroundColor: "white",
    borderRadius: "50%",
    transition: "transform 0.5s ease",
    cursor: "pointer",
    transform: moving ? "translateX(25px)" : "translateX(0px)",
  };

  //Radio buttons
  const onRadioHandler = (option) => {
    const newMap = new Map(allIds);
    if (option == "Empty") {
      setAllids(new Map());
      setAllSelectedids(new Map());
      setIdSelect(selectedIds);
      setAllColumnSelect(selectedIds);
      setAllRowSelect(selectedIds);
    } else {
      allSelectedIds.forEach((_, keys) => {
        newMap.set(keys, option.charAt(0));
      });
      setAllids(newMap);
      setAllSelectedids(new Map());
      setIdSelect(selectedIds);
      setAllColumnSelect(selectedIds);
      setAllRowSelect(selectedIds);
    }
  };

  for (let i = 1; i < 13; i++) {
    ColoumElements.push(
      <GridButton
        id={i.toString()}
        onClickHandler={() => onColumnHandler(i.toString())}
      />
    );
  }

  console.log(allSelectedIds);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.content}>
        <div className={styles.plate}>Plate Setup</div>
        <div className={styles.setup}>
          <div className={styles.grid}>
            <div className={styles.grid_container}>
              <div className={styles.grid_child}>
                <div></div>
                {ColoumElements.map((element) => {
                  return element;
                })}
              </div>

              {alphabetId.map((name, index) => {
                return (
                  <>
                    <div className={styles.grid_child}>
                      <GridButton
                        id={name}
                        onClickHandler={() => onRowsHandler(name)}
                      />
                      {ColoumElements.map((e, eIndex) => {
                        const Colid = `${name}${eIndex + 1}`;
                        return (
                          <GridCells
                            ColId={Colid}
                            onClickHandler={() => onClickHandler(Colid)}
                            label={allIds.has(Colid) ? allIds.get(Colid) : " "}
                            bgColor={
                              idSelect.has(Colid) ||
                              allColumnSelect.has(Colid) ||
                              allRowSelect.has(Colid)
                                ? "white"
                                : "transparent"
                            }
                          />
                        );
                      })}
                    </div>
                  </>
                );
              })}
            </div>
          </div>
          <div className={styles.options}>
            <div className={styles.gradient}>
              <div className={styles.gradient_text}>Gradient</div>
              <div className={styles.on_off}>
                <div className={styles.switch}>
                  <div style={circleStyle} onClick={onMovingBall}></div>
                </div>
              </div>
            </div>
            <div className={styles.check_box}>
              <div className={styles.check_list}>
                {radioLables.map((e, index) => (
                  <Radio labelName={e} onChange={() => onRadioHandler(e)} />
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Home;
